(foo 5)
(select f [:JRadioButton])
(select f [:.type])
(def a 10)
a
(print a)
(set! a 15)
(set! a (+ a 5))
(def b)
b
(set! b 10)
(set! b (+ 10 5))
(var-set b 10)
(def a 10)
(var-set a 15)
(let [a 5] (print a) (set! a 10) (print a))
(def a (atom 50))
a
(swap! a 10
)
(swap! a 10)
(swap! a #(- %1 40))
a
(loop [i 0] (when (> 10 i) (println i) (recur (inc i))))
(loop [i 0 vect []] (if (= i 5) vect (do (conj i vect) (recur (inc i)))))
(loop [i 0 vect []] (if (= i 5) vect (do (recur (inc i) (conj i vect)))))
(loop [i 0 vect []] (if (= i 5) vect (do (recur (inc i) (conj vect i)))))
(rand)
(int (rand))
(pop [1 2 3])
(pop (1 2 3))
(pop '(1 2 3))
(defn thing [] (take 1 (repeatedly #(rand-int 10))))
(thing)
(defn thing [] (take 5 (repeatedly #(rand-int 10))))
(thing)
(defn thing [] (take 12 (repeatedly #(rand-int 10))))
(thing)
(.contains '(1 2 3 4 5) 3)
(.contains '(1 2 3 4 5) 6)
(button)
(get-widget-option-map* (button))
(:use seesaw.widget-options)
(get-widget-option-map* (button))
(button)
(list)
(button)
(show-options (button))
(:use seesaw.core)
(+ 1 2)
(:use 'seesaw.core)
(:use 'seesaw.dev)
(show-options (button
0
))
(show-options (button))
(seesaw.core/user-data)
(dedupe [1 2 3 3])
(dedupe (vector 1 2 3 4 4 5))
(rand 100)
(int (rand 100))
(nth 2 '(1 2 3 4 5))
(nth '(1 2 3) 2)
(button)
(list 1 2 3)
(pop '(1 2 3))
(car '(1 2 3))
(first '(1 2 3))
(rest '(1 2 3))
(null '())
(empty '())
(if '() 1 2)
(empty? '())
(print 5 "ahoj " 3)
(button-rating 12)
(append (list 1 2) (list 3 4))
(conj (list 1 2) (list 3 4))
(concat (list 1 2 3) (list 4 5 6))
(% 12 5)
(list '())
(list nil)
(= "ahoj" "ahoj")
(= "ahoj" "ahop")
^Z
(:use seesaw.color)
  (:use seesaw.core)
  (:use seesaw.font)
  (:use 'seesaw.options)
(distinct '(1 2 3 1 2 3 4 5))
(defn aa [num] (if (= num 5) (aa 6) 10))
(aa 6)
(aa 5)
(map 5)
(exit)
